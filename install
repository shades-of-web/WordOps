#!/usr/bin/env bash
# -------------------------------------------------------------------------
# WordOps install and update script for Debian
# -------------------------------------------------------------------------
# Website:       https://wordops.net
# GitHub:        https://github.com/WordOps/WordOps
# Copyright (c) 2019-2024 - WordOps
# This script is licensed under M.I.T
# -------------------------------------------------------------------------
# Version 3.21.3 - 2024-06-14
# -------------------------------------------------------------------------

# Set the CLI output colors
CSI='\033['
TPUT_RESET="${CSI}0m"
TPUT_FAIL="${CSI}1;31m"
TPUT_ECHO="${CSI}1;36m"
TPUT_OK="${CSI}1;32m"

wo_lib_echo() {
    echo -e "${TPUT_ECHO}${*}${TPUT_RESET}"
}

wo_lib_echo_info() {
    echo -e "$*"
}

wo_lib_echo_fail() {
    echo -e "${TPUT_FAIL}${*}${TPUT_RESET}"
}

wo_lib_error() {
    echo -e "[ $(date) ] ${TPUT_FAIL}${*}${TPUT_RESET}"
    exit "$2"
}

# Check for root privileges
if [[ $EUID -ne 0 ]]; then
    wo_lib_echo_fail "Sudo privilege required..."
    wo_lib_echo_fail "Use: wget -qO wo wops.cc && sudo bash wo"
    exit 100
fi

# Set environment variables
export DEBIAN_FRONTEND=noninteractive
export LANG='en_US.UTF-8'
export LC_ALL='C.UTF-8'

# Main functions
command_exists() {
    command -v "$@" >/dev/null 2>&1
}

_run() {
    if [ -n "$2" ]; then
        echo -ne "${TPUT_ECHO}${2}${TPUT_RESET}\t"
    fi
    if ! { "$1" >>"$wo_install_log" 2>&1; }; then
        if [ -n "$2" ]; then
            echo -e "${TPUT_FAIL}[KO]${TPUT_RESET}"
        fi
    else
        if [ -n "$2" ]; then
            echo -e "[${TPUT_OK}OK${TPUT_RESET}]"
        fi
    fi
}

wo_init_variables() {
    wo_branch=${wo_branch:-master}
    readonly wo_install_log=/var/log/wo/install.log
    readonly TIME_FORMAT='%d-%b-%Y-%H%M%S'
    TIME=$(date +"$TIME_FORMAT")
    readonly TIME
    readonly WO_BACKUP_FILE="/var/lib/wo-backup/wo-backup.$TIME.tar.zst"
}

wo_dir_init() {
    local wo_log_dir=/var/log/wo
    local wo_backup_dir=/var/lib/wo-backup
    local wo_tmp_dir=/var/lib/wo/tmp
    if [ ! -d "$wo_log_dir" ] || [ ! -d "$wo_backup_dir" ] || [ ! -d "$wo_tmp_dir" ]; then
        mkdir -p "$wo_backup_dir" "$wo_log_dir" "$wo_tmp_dir"
        touch /var/log/wo/{wordops.log,install.log}
        chmod -R 750 "$wo_log_dir" "$wo_backup_dir" "$wo_tmp_dir"
        chown -R root:adm "$wo_log_dir"
    fi
}

wo_install() {
    local python_ver
    python_ver=$(python3 -c "import sys; print(sys.version_info[1])")
    
    rm -rf /opt/wo
    python3 -m venv /opt/wo
    source /opt/wo/bin/activate
    /opt/wo/bin/pip install -U setuptools pip wheel distro

    /opt/wo/bin/pip install -U git+https://github.com/WordOps/WordOps.git@$wo_branch#egg=wordops --upgrade-strategy=eager

    cp -rf /opt/wo/lib/python3."$python_ver"/site-packages/usr/* /usr/
    cp -rn /opt/wo/lib/python3."$python_ver"/site-packages/etc/* /etc/
    cp -f /opt/wo/lib/python3."$python_ver"/site-packages/etc/bash_completion.d/wo_auto.rc /etc/bash_completion.d/wo_auto.rc
    rm -f /usr/local/bin/wo
    ln -s /opt/wo/bin/wo /usr/local/bin/
    deactivate
}

wo_backup_wo() {
    if [ -d /etc/nginx ] && [ -d /etc/wo ] && [ -d /var/lib/wo ]; then
        /bin/tar -I zstd -cf "$WO_BACKUP_FILE" /etc/nginx /etc/wo /var/lib/wo
    fi
}

wo_uninstall() {
    local python_ver
    python_ver=$(python3 -c "import sys; print(sys.version_info[1])")
    if { /opt/wo/bin/pip list | grep -q "wordops" >/dev/null 2>&1; }; then
        /opt/wo/bin/pip uninstall wordops -y
    fi
    rm -rf /usr/local/lib/python3."$python_ver"/dist-packages/{pystache-*,cement-2.*,wo-*,wordops-*} /usr/local/bin/wo /etc/bash_completion.d/wo_auto.rc /var/lib/wo /etc/wo /usr/lib/wo/templates /opt/wo
}

wo_init() {
    if [ -f ./setup.py ]; then
        wo_version_new=$(grep "version='" setup.py | awk -F "'" '{print $2}' 2>&1)
    else
        wo_version_new=$(curl -m 5 --retry 3 -sL https://api.github.com/repos/WordOps/WordOps/releases/latest 2>&1 | jq -r '.tag_name')
    fi

    echo ""
    wo_lib_echo "Welcome to WordOps install/update script ${wo_version_new}"
    echo ""
}

# Main setup
wo_dir_init
wo_init
wo_init_variables

if [ "$1" = "--purge" ] || [ "$1" = "--uninstall" ]; then
    _run wo_backup_wo "Backing-up WO install"
    _run wo_uninstall "Uninstalling WordOps"
    wo_lib_echo "The WordOps backup files can be found in $WO_BACKUP_FILE"
    exit 0
else
    if [ -x /usr/local/bin/wo ]; then
        _run wo_install "Updating WordOps"
    else
        _run wo_install "Installing WordOps"
    fi

    wo sync

    wo_lib_echo "WordOps (wo) installation/update to $wo_version_new was successful!"
    echo
    wo_lib_echo "To enable bash-completion, use the command: bash -l"
    echo
    wo_lib_echo "To install WordOps recommended stacks, use: wo stack install"
    echo
    wo_lib_echo "To create a first WordPress site, use: wo site create site.tld --wp"
    echo
    wo_lib_echo "WordOps Documentation: https://docs.wordops.net"
    wo_lib_echo "WordOps Community Forum: https://community.wordops.net"
    echo
    wo_lib_echo "Give WordOps a GitHub star: https://github.com/WordOps/WordOps/"
    echo
fi
